{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","actions/configActions.js","../node_modules/reactstrap/es/Collapse.js","../node_modules/reactstrap/es/FormFeedback.js","views/Base/NewDriveAuthModal/NewDriveAuthModal.js","views/RemoteManagement/NewDrive/ProviderAutoSuggest.js","views/RemoteManagement/NewDrive/NewDrive.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","prototype","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","TypeError","getProviders","dispatch","axiosInstance","post","urls","then","res","type","GET_PROVIDERS","payload","data","providers","getConfigDump","GET_CONFIG_DUMP","status","REQUEST_SUCCESS","error","REQUEST_ERROR","_transitionStatusToCl","propTypes","_objectSpread2","Transition","isOpen","PropTypes","bool","children","oneOfType","arrayOf","node","tag","tagPropType","className","navbar","cssModule","object","innerRef","func","string","defaultProps","appear","enter","exit","timeout","TransitionTimeouts","Collapse","transitionStatusToClassHash","TransitionStatuses","ENTERING","ENTERED","EXITING","EXITED","getHeight","scrollHeight","_Component","props","_this","this","state","height","forEach","name","bind","_assertThisInitialized","_inheritsLoose","_proto","onEntering","isAppearing","setState","onEntered","onExit","onExiting","offsetHeight","onExited","render","_this2","_this$props","Tag","otherProps","_objectWithoutPropertiesLoose","transitionProps","pick","TransitionPropTypeKeys","childProps","omit","React","createElement","_extends","in","collapseClass","getTransitionClass","classes","mapToCssModules","classNames","style","ref","Component","valid","tooltip","FormFeedback","attributes","validMode","NewDriveAuthModal","toggle","closeModal","isVisible","ErrorBoundary","Modal","ModalHeader","data-test","ModalBody","ModalFooter","Button","color","onClick","getSuggestions","config","inputValue","trim","toLowerCase","inputLength","filter","lang","Description","slice","getSuggestionValue","suggestion","Prefix","renderSuggestion","ProviderAutoSuggest","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","onChange","currentConfig","findFromConfig","inputProps","placeholder","alwaysRenderSuggestions","highlightFirstSuggestion","DriveParameters","drivePrefix","loadAdvanced","changeHandler","currentValues","isValidMap","errorsMap","currentProvider","outputMap","Options","map","attr","idx","Hide","Advanced","labelValue","Help","requiredValue","Required","hasExamples","isEmpty","Examples","examplesMap","inputType","IsPassword","Type","key","FormGroup","row","Label","for","Name","sm","Col","Input","invalid","id","required","CustomInput","label","isValid","NewDrive","context","e","target","handleInputChange","inputName","optionTypes","formValues","validateResult","validateSizeSuffix","validateDuration","validateInt","prevState","formErrors","changeDriveType","event","newValue","val","availableOptions","item","DefaultStr","openSetupDrive","preventDefault","editAdvancedOptions","advancedOptions","clearForm","_","driveName","changeName","driveNameIsEditable","validateDriveName","driveNameIsValid","getConfigForRemote","response","errors","openAdvancedSettings","colAdvanced","configEndDiv","scrollIntoView","behavior","gotoNextStep","currentStepNumber","handleSubmit","setCurrentStep","gotoPrevStep","stepNo","StepShowCase","stepTitles","Container","Row","Fragment","md","colRconfig","colSetup","formValuesValid","authModalIsVisible","configCheckInterval","toggleAuthModal","startAuthentication","checkConfigStatus","clearInterval","history","toast","autoClose","flag","entries","setInterval","NEW_DRIVE_CONFIG_REFRESH_TIMEOUT","console","validateForm","defaults","finalParameterValues","defaultValueObj","find","ele","array","parameters","match","params","createConfig","info","updateConfig","stopAuthentication","warn","log","Card","CardBody","href","isEdit","connect"],"mappings":"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","file":"static/js/16.1cb41fb8.chunk.js","sourcesContent":["import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import axiosInstance from \"../utils/API/API\";\nimport {GET_CONFIG_DUMP, GET_PROVIDERS, REQUEST_ERROR, REQUEST_SUCCESS} from \"./types\";\nimport urls from \"../utils/API/endpoint\";\n\n\n/**\n * Gets all Providers from the rclone UI Backend\n * @returns {Function}\n */\nexport const getProviders = () => dispatch => {\n    axiosInstance.post(urls.getProviders).then(res => dispatch({\n        type: GET_PROVIDERS,\n        payload: res.data.providers\n    }))\n};\n/**\n * Gets dump of configured remotes from the rclone backend\n * @returns {Function}\n */\nexport const getConfigDump = () => dispatch => {\n    axiosInstance.post(urls.getConfigDump).then(res => dispatch({\n        type: GET_CONFIG_DUMP,\n        status: REQUEST_SUCCESS,\n        payload: res.data\n    }), error => dispatch({\n        type: GET_CONFIG_DUMP,\n        status: REQUEST_ERROR,\n        payload: error\n    }))\n};","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _objectSpread2 from \"@babel/runtime/helpers/esm/objectSpread\";\n\nvar _transitionStatusToCl;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Transition } from 'react-transition-group';\nimport { mapToCssModules, omit, pick, TransitionTimeouts, TransitionPropTypeKeys, TransitionStatuses, tagPropType } from './utils';\n\nvar propTypes = _objectSpread2({}, Transition.propTypes, {\n  isOpen: PropTypes.bool,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  tag: tagPropType,\n  className: PropTypes.node,\n  navbar: PropTypes.bool,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\n});\n\nvar defaultProps = _objectSpread2({}, Transition.defaultProps, {\n  isOpen: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  tag: 'div',\n  timeout: TransitionTimeouts.Collapse\n});\n\nvar transitionStatusToClassHash = (_transitionStatusToCl = {}, _transitionStatusToCl[TransitionStatuses.ENTERING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.ENTERED] = 'collapse show', _transitionStatusToCl[TransitionStatuses.EXITING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.EXITED] = 'collapse', _transitionStatusToCl);\n\nfunction getTransitionClass(status) {\n  return transitionStatusToClassHash[status] || 'collapse';\n}\n\nfunction getHeight(node) {\n  return node.scrollHeight;\n}\n\nvar Collapse =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Collapse, _Component);\n\n  function Collapse(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.state = {\n      height: null\n    };\n    ['onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited'].forEach(function (name) {\n      _this[name] = _this[name].bind(_assertThisInitialized(_this));\n    });\n    return _this;\n  }\n\n  var _proto = Collapse.prototype;\n\n  _proto.onEntering = function onEntering(node, isAppearing) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onEntering(node, isAppearing);\n  };\n\n  _proto.onEntered = function onEntered(node, isAppearing) {\n    this.setState({\n      height: null\n    });\n    this.props.onEntered(node, isAppearing);\n  };\n\n  _proto.onExit = function onExit(node) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onExit(node);\n  };\n\n  _proto.onExiting = function onExiting(node) {\n    // getting this variable triggers a reflow\n    var _unused = node.offsetHeight; // eslint-disable-line no-unused-vars\n\n    this.setState({\n      height: 0\n    });\n    this.props.onExiting(node);\n  };\n\n  _proto.onExited = function onExited(node) {\n    this.setState({\n      height: null\n    });\n    this.props.onExited(node);\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        Tag = _this$props.tag,\n        isOpen = _this$props.isOpen,\n        className = _this$props.className,\n        navbar = _this$props.navbar,\n        cssModule = _this$props.cssModule,\n        children = _this$props.children,\n        innerRef = _this$props.innerRef,\n        otherProps = _objectWithoutPropertiesLoose(_this$props, [\"tag\", \"isOpen\", \"className\", \"navbar\", \"cssModule\", \"children\", \"innerRef\"]);\n\n    var height = this.state.height;\n    var transitionProps = pick(otherProps, TransitionPropTypeKeys);\n    var childProps = omit(otherProps, TransitionPropTypeKeys);\n    return React.createElement(Transition, _extends({}, transitionProps, {\n      in: isOpen,\n      onEntering: this.onEntering,\n      onEntered: this.onEntered,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }), function (status) {\n      var collapseClass = getTransitionClass(status);\n      var classes = mapToCssModules(classNames(className, collapseClass, navbar && 'navbar-collapse'), cssModule);\n      var style = height === null ? null : {\n        height: height\n      };\n      return React.createElement(Tag, _extends({}, childProps, {\n        style: _objectSpread2({}, childProps.style, {}, style),\n        className: classes,\n        ref: _this2.props.innerRef\n      }), children);\n    });\n  };\n\n  return Collapse;\n}(Component);\n\nCollapse.propTypes = propTypes;\nCollapse.defaultProps = defaultProps;\nexport default Collapse;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  valid: PropTypes.bool,\n  tooltip: PropTypes.bool\n};\nvar defaultProps = {\n  tag: 'div',\n  valid: undefined\n};\n\nvar FormFeedback = function FormFeedback(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      valid = props.valid,\n      tooltip = props.tooltip,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"valid\", \"tooltip\", \"tag\"]);\n\n  var validMode = tooltip ? 'tooltip' : 'feedback';\n  var classes = mapToCssModules(classNames(className, valid ? \"valid-\" + validMode : \"invalid-\" + validMode), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormFeedback.propTypes = propTypes;\nFormFeedback.defaultProps = defaultProps;\nexport default FormFeedback;","import React from \"react\";\nimport {Button, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\nimport * as  PropTypes from \"prop-types\";\nimport ErrorBoundary from \"../../../ErrorHandling/ErrorBoundary\";\n\n\nclass NewDriveAuthModal extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.props.closeModal();\n    }\n\n\n    render() {\n        const {isVisible} = this.props;\n        return (\n            <div>\n                <ErrorBoundary>\n                    <Modal isOpen={isVisible} toggle={this.toggle}>\n                        <ModalHeader toggle={this.toggle} data-test=\"modalHeader\">Configuring your drive.</ModalHeader>\n                        <ModalBody data-test=\"modalBody\">\n                            A page will open for you with the authentication for your drive. This modal will\n                            automatically\n                            dismiss upon successful creation\n                        </ModalBody>\n                        <ModalFooter data-test=\"modalFooter\">\n                            <Button color=\"primary\" onClick={this.toggle}>Done</Button>{' '}\n                            {/*<Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>*/}\n                        </ModalFooter>\n                    </Modal>\n                </ErrorBoundary>\n            </div>\n        );\n    }\n}\n\nNewDriveAuthModal.propTypes = {\n    isVisible: PropTypes.bool.isRequired,\n    closeModal: PropTypes.func.isRequired\n};\nNewDriveAuthModal.defaultProps = {\n    isVisible: true,\n};\n\n\nexport default NewDriveAuthModal;","import Autosuggest from 'react-autosuggest';\nimport React from \"react\";\nimport {findFromConfig} from \"../../../utils/Tools\";\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = (config, value) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    if (inputLength === 0) {\n        return config;\n\n    }\n\n    return inputLength === 0 ? [] : config.filter(lang =>\n        lang.Description.toLowerCase().slice(0, inputLength) === inputValue\n    );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.Prefix;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n    <div>\n        {suggestion.Description}\n    </div>\n);\n\nclass ProviderAutoSuggest extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Autosuggest is a controlled component.\n        // This means that you need to provide an input value\n        // and an onChange handler that updates this value (see below).\n        // Suggestions also need to be provided to the Autosuggest,\n        // and they are initially empty because the Autosuggest is closed.\n        this.state = {\n            suggestions: []\n        };\n    }\n\n\n    // Autosuggest will call this function every time you need to update suggestions.\n    // You already implemented this logic above, so just use it.\n    onSuggestionsFetchRequested = ({value}) => {\n        // console.log(value);\n        this.setState({\n            suggestions: getSuggestions(this.props.suggestions, value)\n        });\n    };\n\n    // Autosuggest will call this function every time you need to clear suggestions.\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n\n    render() {\n        const {value, onChange, suggestions} = this.props;\n        const currentConfig = findFromConfig(suggestions, value);\n        let renderVal = \"\";\n        if (currentConfig === undefined) {\n            renderVal = value;\n        } else {\n            renderVal = currentConfig.Description;\n        }\n\n        // Autosuggest will pass through all these props to the input.\n        const inputProps = {\n            placeholder: 'Type a provider type',\n            value: renderVal,\n            onChange: onChange\n        };\n\n        // Finally, render it!\n        return (\n            <Autosuggest\n                suggestions={this.state.suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                alwaysRenderSuggestions={true}\n                highlightFirstSuggestion={true}\n                inputProps={inputProps}\n            />\n        );\n    }\n}\n\nexport default ProviderAutoSuggest;","import React from 'react';\nimport {Button, Card, CardBody, Col, Collapse, Container, FormFeedback, FormGroup, Input, Label, Row} from \"reactstrap\";\n// import {config} from \"./config.js\";\nimport NewDriveAuthModal from \"../../Base/NewDriveAuthModal\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {\n    findFromConfig,\n    isEmpty,\n    validateDriveName,\n    validateDuration,\n    validateInt,\n    validateSizeSuffix\n} from \"../../../utils/Tools\";\nimport ProviderAutoSuggest from \"./ProviderAutoSuggest\";\nimport {toast} from \"react-toastify\";\nimport * as PropTypes from 'prop-types';\nimport {getProviders} from \"../../../actions/configActions\";\nimport {connect} from \"react-redux\";\nimport {NEW_DRIVE_CONFIG_REFRESH_TIMEOUT} from \"../../../utils/Constants\";\nimport ErrorBoundary from \"../../../ErrorHandling/ErrorBoundary\";\nimport urls from \"../../../utils/API/endpoint\";\n\n/**\n * Returns a component with set of input, error for the drivePrefix.\n * The input type changes based on config.Options.Type parameter. see code for details.\n * @param drivePrefix   {string}    Name of the remote in the config.\n * @param loadAdvanced  {boolean}   Load or skip the advanced options from the config options.\n * @param changeHandler {function}  This function is called once the value changes\n * @param currentValues {$ObjMap}   This map denotes current updated values for the parameters.\n * @param isValidMap    {$ObjMap}   This map denotes whether the parameter value is valid. This should be set by the changeHandler.\n * @param errorsMap     {$ObjMap}   This map contains string errors of each parameters.\n * @param config        {$ObjMap}   This map contains the actual parameter list and Options for all the providers.\n * @returns             {Array|*}   JSX array with parameter formGroups.\n * @constructor\n */\nfunction DriveParameters({drivePrefix, loadAdvanced, changeHandler, currentValues, isValidMap, errorsMap, config}) {\n    if (drivePrefix !== undefined && drivePrefix !== \"\") {\n        const currentProvider = findFromConfig(config, drivePrefix);\n        let outputMap = [];\n        if (currentProvider !== undefined) {\n            const inputsMap = currentProvider.Options;\n\n            // console.log(\"current values\" + currentValues);\n\n            /* Options format is as follows\n            {\n                        \"Advanced\": true,\n                        \"Default\": -1,\n                        \"DefaultStr\": \"off\",\n                        \"Help\": \"If Object's are greater, use drive v2 API to download.\",\n                        \"Hide\": 0,\n                        \"IsPassword\": false,\n                        \"Name\": \"v2_download_min_size\",\n                        \"NoPrefix\": false,\n                        \"Provider\": \"\",\n                        \"Required\": false,\n                        \"ShortOpt\": \"\",\n                        \"Type\": \"SizeSuffix\",\n                        \"Value\": null,\n                        \"ValueStr\": \"off\"\n                    },\n\n            */\n\n            outputMap = inputsMap.map((attr, idx) => {\n                if (attr.Hide === 0 && ((loadAdvanced && attr.Advanced) || (!loadAdvanced && !attr.Advanced))) {\n                    const labelValue = `${attr.Help}`;\n                    const requiredValue = ((attr.Required) ? (<i className={\"text-red\"}>*</i>) : null);\n\n                    const hasExamples = !isEmpty(attr.Examples);\n                    let examplesMap = null;\n\n                    let inputType = \"\";\n\n\n                    if (attr.IsPassword) {\n                        inputType = \"password\";\n                    } else if (hasExamples) {\n                        inputType = \"string\";\n                        // examplesMap = attr.Examples.map((ex1, id1) => {\n                        //     return (<option key={\"option\" + id1} value={ex1.Value}>{ex1.Help}</option>);\n                        // })\n                    } else if (attr.Type === \"bool\") {\n                        inputType = \"select\";\n                        examplesMap = [\n                            (<option key={1} value={true}>Yes</option>),\n                            (<option key={2} value={false}>No</option>)\n                        ];\n                    } else {\n                        // TODO: Write logic for SizeSuffix, Duration, int\n                        if (attr.Type === \"int\") {\n                            inputType = \"number\";\n                        } else if (attr.Type === \"string\") {\n                            inputType = \"text\";\n                        } else {\n                            inputType = \"text\";\n                        }\n\n                    }\n                    return (\n                        <FormGroup key={idx} row>\n                            <Label for={attr.Name} sm={5}>{labelValue}{requiredValue}</Label>\n                            <Col sm={7}>\n                                <Input type={inputType} value={currentValues[attr.Name]}\n                                       name={attr.Name} valid={isValidMap[attr.Name]} invalid={!isValidMap[attr.Name]}\n                                       id={attr.Name} onChange={changeHandler} required={attr.Required}>\n                                    {examplesMap}\n                                </Input>\n                                <FormFeedback>{errorsMap[attr.Name]}</FormFeedback>\n\n                            </Col>\n                        </FormGroup>\n                    );\n                } else {\n                    return null;\n                }\n            });\n        }\n        return outputMap;\n    }\n    return (\n        <div>Select a drive type to continue</div>\n    );\n}\n\n// function DriveTypes({config}) {\n//     // console.log(config);\n//     let configMap = config.map((drive, idx) => (\n//         <option key={drive.Prefix} value={idx}>{drive.Description}</option>\n//     ));\n//     return configMap;\n// }\n\n\n/**\n * Functional Component. Custom input for selecting a new name for the current config.\n * @param key           {string}    Contains the key to be used as the react key parameter in an array\n * @param id            {string}    Id to be used as a HTML id.\n * @param label         {string}    Label of the form input\n * @param changeHandler {function}  Called when the input changes.\n * @param type          {string}    Type of the input (ReactStrap supported). Eg: select, text etc.\n * @param value         {string}    The current value of the input.\n * @param name          {string}    The html name for the input.\n * @param placeholder   {string}    Placeholder text for input.\n * @param isValid       {boolean}   If set, displays positive message, else displays error message.\n * @returns             {*}         Functional component.\n * @constructor\n */\nfunction CustomInput({key, id, label, changeHandler, type, value, name, placeholder, isValid = false}) {\n    return (\n        <FormGroup key={key} row>\n            <Label for={id} sm={5}>{label}</Label>\n            <Col sm={7}>\n                <Input type={type} value={value} name={name} placeholder={placeholder}\n                       id={id} onChange={changeHandler} valid={isValid} invalid={!isValid} required/>\n                <FormFeedback valid>Sweet! that name is available</FormFeedback>\n                <FormFeedback>Sad! That name is already assigned or empty</FormFeedback>\n            </Col>\n        </FormGroup>);\n}\n\n/**\n * Component to create a new remote configuration.\n */\nclass NewDrive extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n\n            colRconfig: true,\n            colSetup: false,\n            colAdvanced: false,\n            driveName: \"\",\n            driveNameIsEditable: true,\n\n            advancedOptions: false,\n            formValues: {},\n            formValuesValid: {},\n            required: {},\n            authModalIsVisible: false,\n\n            drivePrefix: \"\",\n            driveNameIsValid: false,\n            formErrors: {driveName: \"\"},\n            optionTypes: {},\n            isValid: {},\n\n            currentStepNumber: 1\n\n        };\n        this.configCheckInterval = null;\n        // console.log(\"Params\", this.props.match.params);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.toggleAuthModal = this.toggleAuthModal.bind(this);\n        this.startAuthentication = this.startAuthentication.bind(this);\n        this.checkConfigStatus = this.checkConfigStatus.bind(this);\n    }\n\n    /**\n     *\n     * @param e {$ObjMap} Event of the toggle event.\n     */\n    toggle = (e) => {\n        let name = e.target.name;\n\n        this.setState({[name]: !this.state[name]})\n    };\n\n    // Returns true or false based on whether the config is created\n    async checkConfigStatus() {\n        const {driveName} = this.state;\n\n        try {\n            let res = await axiosInstance.post(urls.getConfigForRemote, {name: driveName});\n            // console.log(res);\n\n            if (!isEmpty(res.data)) {\n                // Config is created, clear the interval and hide modal\n                clearInterval(this.configCheckInterval);\n                this.configCheckInterval = null;\n                this.toggleAuthModal();\n                this.props.history.push('/dashboard');\n\n            }\n        } catch (e) {\n            // console.log(`Error occurred while checking for config: ${e}`);\n            toast.error(`Error creating config. ${e}`, {\n                autoClose: false\n            });\n        }\n    }\n\n    /**\n     * Handle inoit change and set appropriate errors.\n     * @param e\n     */\n    handleInputChange = (e) => {\n\n        let inputName = e.target.name;\n        let inputValue = e.target.value;\n        const inputType = this.state.optionTypes[inputName];\n        this.setState({\n            formValues: {\n                ...this.state.formValues,\n                [inputName]: inputValue\n            }\n        });\n        let validateResult = true;\n        let error = \"\";\n        if (inputType === \"SizeSuffix\") {\n            validateResult = validateSizeSuffix(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is size( off | {unit}{metric} eg: 10G, 100M, 10G100M etc.)\"\n            }\n        } else if (inputType === \"Duration\") {\n            validateResult = validateDuration(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is time ({unit}{metric} eg: 10ms, 100m, 10h15ms etc.)\"\n            }\n        } else if (inputType === \"int\") {\n            validateResult = validateInt(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is int (100,200,300 etc)\"\n            }\n        }\n\n        if (this.state.required[inputName] && (!inputValue || inputValue === \"\")) {\n            validateResult = false;\n            if (!validateResult) {\n                error += \" This field is required\";\n            }\n        }\n\n\n        this.setState((prevState) => {\n            return {\n                isValid: {\n                    ...prevState.isValid,\n                    [inputName]: validateResult\n                },\n                formErrors: {\n                    ...prevState.formErrors,\n                    [inputName]: error\n                },\n            }\n        });\n\n\n    };\n\n    /**\n     * Update the driveType and then load the equivalent input parameters for that drive.\n     * @param event     {$ObjMap} Event to be handled.\n     * @param newValue  {string} new Value of the drive type.\n     */\n    changeDriveType = (event, {newValue}) => {\n\n        const {providers} = this.props;\n\n        let val = newValue;\n\n\n        let availableOptions = {};\n        let optionTypes = {};\n        let isValid = {};\n        let formErrors = {};\n        let required = {};\n        // let drivePrefix = \"\";\n        // console.log(\"driveType change\", val);\n        if (val !== undefined && val !== \"\") {\n\n            const currentConfig = findFromConfig(providers, val);\n            if (currentConfig !== undefined) {\n\n                currentConfig.Options.forEach(item => {\n\n                    const {DefaultStr, Type, Name, Required, Hide} = item;\n                    if (Hide === 0) {\n                        availableOptions[Name] = DefaultStr;\n                        optionTypes[Name] = Type;\n                        required[Name] = Required;\n\n                        isValid[Name] = !(Required && (!DefaultStr || DefaultStr === \"\"));\n\n                        formErrors[Name] = \"\";\n                    }\n                });\n            }\n            this.setState({\n                drivePrefix: val,\n                formValues: availableOptions,\n                optionTypes: optionTypes,\n                isValid: isValid,\n                formErrors: formErrors,\n                required: required\n            });\n        } else {\n            this.setState({drivePrefix: val})\n\n        }\n    };\n\n    /**\n     * Open second step of setting up the drive and scroll into view.\n     */\n    openSetupDrive = (e) => {\n        if (e) e.preventDefault();\n        this.setState({'colSetup': true});\n        // this.setupDriveDiv.scrollIntoView({behavior: \"smooth\"});\n    };\n\n    /**\n     *  toggle the step 3: advanced options\n     */\n    editAdvancedOptions = (e) => {\n        this.setState({advancedOptions: !this.state.advancedOptions});\n    };\n\n    /**\n     * Validate the form and set the appropriate errors in the state.\n     * @returns {boolean}\n     */\n    validateForm() {\n        //    Validate driveName and other parameters\n        const {driveNameIsValid, drivePrefix, isValid} = this.state;\n        let flag = true;\n\n        if (!driveNameIsValid) {\n            flag = false;\n        }\n        if (drivePrefix === \"\") {\n            flag = false;\n        }\n\n\n        /*Check for validations based on inputType*/\n        for (const [key, value] of Object.entries(isValid)) {\n            if (!key || !value) {\n                flag = false;\n                break;\n            }\n        }\n\n        return flag;\n    }\n\n    /**\n     *  Show or hide the auth modal.\n     */\n    toggleAuthModal() {\n        this.setState((state, props) => {\n            return {authModalIsVisible: !state.authModalIsVisible}\n        });\n    }\n\n    /**\n     *  Show or hide the authentication modal and start timer for checking if the new config is created.\n     */\n    startAuthentication() {\n        this.toggleAuthModal();\n        // Check every second if the config is created\n        if (this.configCheckInterval === null) {\n            this.configCheckInterval = setInterval(this.checkConfigStatus, NEW_DRIVE_CONFIG_REFRESH_TIMEOUT);\n        } else {\n            console.error(\"Interval already running. Should not start a new one\");\n        }\n\n    }\n\n    /**\n     *  Called when the config is successfully created. Clears the timout and hides the authentication modal.\n     */\n    stopAuthentication() {\n        this.setState((state, props) => {\n            return {authModalIsVisible: false}\n        });\n        clearInterval(this.configCheckInterval);\n\n    }\n\n    /**\n     * Called when form action submit is to be handled.\n     * Validate form and submit request.\n     * */\n    async handleSubmit(e) {\n        e && e.preventDefault();\n        // console.log(\"Submitted form\");\n\n        const {formValues, drivePrefix} = this.state;\n        const {providers} = this.props;\n\n\n        if (this.validateForm()) {\n\n            if (drivePrefix !== undefined && drivePrefix !== \"\") {\n                const currentProvider = findFromConfig(providers, drivePrefix);\n                if (currentProvider !== undefined) {\n\n\n                    const defaults = currentProvider.Options;\n\n                    // console.log(config, formValues, defaults);\n\n                    let finalParameterValues = {};\n\n\n                    for (const [key, value] of Object.entries(formValues)) {\n\n                        if (key === \"token\") {\n                            finalParameterValues[key] = value;\n                            continue;\n                        }\n                        const defaultValueObj = defaults.find((ele, idx, array) => {\n                            // console.log(key, ele.Name, key === ele.Name);\n                            return (key === ele.Name);\n                        });\n                        if (defaultValueObj) {\n\n                            const {DefaultStr} = defaultValueObj;\n                            if (value !== DefaultStr) {\n                                // console.log(`${value} !== ${DefaultStr}`);\n                                finalParameterValues[key] = value;\n                            }\n                        }\n\n                    }\n\n\n                    let data = {\n                        parameters: finalParameterValues,\n\n                        name: this.state.driveName,\n                        type: this.state.drivePrefix\n                    };\n\n\n                    // console.log(\"Validated form\");\n                    this.startAuthentication();\n                    try {\n                        const {drivePrefix} = this.props.match.params;\n\n                        if (!drivePrefix) {\n\n                            await axiosInstance.post(urls.createConfig, data);\n                            toast.info(\"Config created\");\n                        } else {\n                            await axiosInstance.post(urls.updateConfig, data);\n                            toast.info(\"Config Updated\");\n                        }\n\n                    } catch (err) {\n                        toast.error(`Error creating config. ${err}`, {\n                            autoClose: false\n                        });\n                        this.stopAuthentication();\n                    }\n\n                }\n            }\n        } else {\n            // if (!this.state.colSetup) {\n            //     this.openSetupDrive();\n            // }\n\n            // if (this.state.advancedOptions && !this.state.colAdvanced) {\n            //     this.openAdvancedSettings();\n            // }\n            toast.warn(`Check for errors before submitting.`, {\n                autoClose: false\n            });\n        }\n    }\n\n    /**\n     * Clears the entire form.\n     * Clearing the driveName and drivePrefix automatically clears the inputs as well.\n     * */\n    clearForm = _ => {\n        this.setState({driveName: \"\", drivePrefix: \"\"})\n    };\n\n\n    /**\n     * Change the name of the drive. Check if it already exists, if not, allow to be changes, else set error.\n     * */\n    changeName = e => {\n        const {driveNameIsEditable} = this.state;\n        const value = e.target.value;\n        if (driveNameIsEditable && validateDriveName(value)) {\n\n            this.setState({driveName: value}, () => {\n\n                if (value === undefined || value === \"\") {\n                    this.setState({driveNameIsValid: false});\n                } else {\n\n                    axiosInstance.post(urls.getConfigForRemote, {name: value}).then((response) => {\n                        let errors = this.state.formErrors;\n                        let isValid = isEmpty(response.data);\n                        if (isValid) {\n                            errors[\"driveName\"] = \"\";\n                        } else {\n                            errors[\"driveName\"] = \"Duplicate\";\n\n                        }\n                        this.setState({formErrors: errors, driveNameIsValid: isValid});\n                    });\n                }\n\n            });\n\n        } else {\n            this.setState((prevState) => ({formErrors: {...prevState.formErrors, \"driveName\": \"Cannot edit name\"}}))\n        }\n    };\n\n    /**\n     * Open the advanced settings card and scroll into view.\n     * @param e\n     */\n    openAdvancedSettings = e => {\n        if (this.state.advancedOptions) {\n            this.setState({colAdvanced: true});\n        } else {\n            this.configEndDiv.scrollIntoView({behavior: \"smooth\"});\n        }\n    };\n\n\n    /**\n     * Check if the provider list is empty else request new providers list.\n     * */\n\n    componentDidMount() {\n        const {drivePrefix} = this.props.match.params;\n\n\n        if (!this.props.providers || this.props.providers.length < 1)\n            this.props.getProviders();\n\n        if (drivePrefix) {\n            //Edit Mode\n            this.setState({driveName: drivePrefix, driveNameIsValid: true, driveNameIsEditable: false});\n            axiosInstance.post(urls.getConfigForRemote, {name: drivePrefix}).then(\n                (res) => {\n                    console.log(res);\n                    this.changeDriveType(undefined, {newValue: res.data.type});\n\n                    this.setState((prevState) => ({\n                        formValues: {...prevState.formValues, ...res.data}\n                    }))\n\n                }\n            )\n        }\n    }\n\n    /**\n     * Clear the intervals.\n     * */\n\n    componentWillUnmount() {\n        clearInterval(this.configCheckInterval);\n        this.configCheckInterval = null;\n    }\n\n    gotoNextStep = () => {\n        const {currentStepNumber, advancedOptions} = this.state;\n        if ((advancedOptions && currentStepNumber === 3) || (!advancedOptions && currentStepNumber === 2)) {\n            this.handleSubmit(null);\n        } else {\n            this.setCurrentStep(currentStepNumber + 1);\n        }\n    };\n\n    gotoPrevStep = () => {\n        const {currentStepNumber} = this.state;\n        this.setCurrentStep(currentStepNumber - 1);\n    };\n\n\n    setCurrentStep = (stepNo) => {\n        this.setState({currentStepNumber: stepNo});\n\n    };\n\n    StepShowCase = ({currentStepNumber}) => {\n        const buttonActiveClassName = \"step-active\";\n        const stepTitles = [\n            \"Set up Remote Config\",\n            \"Set up Drive\",\n            \"Advanced Config\"\n        ];\n\n        return (\n            <Container className=\"timeline\">\n                <Row>\n                    {stepTitles.map((item, idx) => {\n                        idx += 1;\n                        return (\n                            <React.Fragment key={idx}>\n                                <Col\n                                    className={\"text-center \" + ((currentStepNumber === idx) ? buttonActiveClassName : \"\")}\n                                    md={2} sm={4}>\n                                    <button className=\"btn btn-step-count\"\n                                            onClick={() => this.setCurrentStep(idx)}>{idx}</button>\n                                    <h4>{item}</h4>\n                                </Col>\n                                {idx !== stepTitles.length && <Col md={3} className={\"d-none d-md-block\"}>\n                                    <div className=\"timeline-divider align-middle\"></div>\n\n                                </Col>}\n                            </React.Fragment>\n                        )\n                    })}\n\n                </Row>\n            </Container>\n        )\n\n    }\n\n    /* return (\n            <div className=\"timeline\">\n                <span className=\"li complete\">\n                    <button className=\"btn btn-primary btn-step-count\">1</button>\n                    <div class=\"status\">\n                        <h4> Shift Created </h4>\n                    </div>    \n                </span> \n                <div className=\"timeline-divider\"></div>  \n                <li className=\"li complete\">\n                    <div class=\"status\">\n                        <h4> Shift Created </h4>\n                    </div>    \n                </li>   \n                <li className=\"li complete\">\n                    <div class=\"status\">\n                        <h4> Shift Created </h4>\n                    </div>    \n                </li>    \n            </div>\n       ) */\n\n\n    render() {\n        const {drivePrefix, advancedOptions, driveName, driveNameIsValid, currentStepNumber} = this.state;\n        const {providers} = this.props;\n        return (\n            <div data-test=\"newDriveComponent\">\n                <ErrorBoundary>\n                    <p>This 3 step process will guide you through creating a new config. For auto config, leave the\n                        parameters as it is.</p>\n                    <this.StepShowCase currentStepNumber={currentStepNumber}/>\n                    <Collapse isOpen={currentStepNumber === 1}>\n                        <Card>\n\n                            <CardBody>\n                                <CustomInput label=\"Name of this drive (For your reference)\"\n                                             changeHandler={this.changeName} value={driveName}\n                                             placeholder={\"Enter a name\"} name=\"name\" id=\"driveName\"\n                                             isValid={driveNameIsValid}/>\n\n                                <FormGroup row>\n                                    <Label for=\"driveType\" sm={5}>Select</Label>\n                                    <Col sm={7}>\n                                        <ProviderAutoSuggest suggestions={providers} value={drivePrefix}\n                                                             onChange={this.changeDriveType}/>\n                                    </Col>\n                                </FormGroup>\n                                <FormGroup row>\n                                    <Col sm={3}>\n                                        <Label for=\"inputDriveName\">Docs are available at </Label>{' '}\n                                        <a href=\"https://rclone.org/commands/rclone_config/\">Rclone Config</a>\n                                    </Col>\n                                </FormGroup>\n                                <div className=\"clearfix\">\n                                    <div className=\"float-right\">\n\n                                        <Button className=\"ml-3 btn-blue\" onClick={this.gotoNextStep}>Next</Button>\n\n                                    </div>\n                                </div>\n                            </CardBody>\n\n                        </Card>\n                    </Collapse>\n                    <Collapse isOpen={currentStepNumber === 2}>\n                        <Card>\n                            {/*div for Scrolling to here*/}\n                            {/* <div ref={(el) => this.setupDriveDiv = el}/> */}\n                            <CardBody>\n                                <DriveParameters drivePrefix={drivePrefix} loadAdvanced={false}\n                                                 changeHandler={this.handleInputChange}\n                                                 errorsMap={this.state.formErrors}\n                                                 isValidMap={this.state.isValid}\n                                                 currentValues={this.state.formValues} config={providers}/>\n\n                                <div className=\"clearfix\">\n                                    <div className=\"float-right\">\n                                        <Input type=\"checkbox\" value={advancedOptions}\n                                               onChange={this.editAdvancedOptions}/><span className=\"mr-3\">Edit Advanced Options</span>\n                                        <Button className=\"btn-no-background\" onClick={this.gotoPrevStep}>Go\n                                            back</Button>\n\n                                        <Button className=\"ml-3 btn-blue\" onClick={this.gotoNextStep}>Next</Button>\n\n                                    </div>\n                                </div>\n                            </CardBody>\n                        </Card>\n                    </Collapse>\n                    <Collapse isOpen={currentStepNumber === 3}>\n                        <Card>\n                            {/* <CardHeader>\n                                    <h5>\n                                        <Button color=\"link\" name=\"colAdvanced\" onClick={this.toggle}\n                                                style={{marginBottom: '1rem'}}><strong>Step 3:</strong> Advanced\n                                            (optional)</Button>\n\n                                    </h5>\n\n                                </CardHeader> */}\n\n\n                            <CardBody>\n                                <DriveParameters drivePrefix={drivePrefix} loadAdvanced={true}\n                                                 changeHandler={this.handleInputChange}\n                                                 errorsMap={this.state.formErrors}\n                                                 isValidMap={this.state.isValid}\n                                                 currentValues={this.state.formValues} config={providers}/>\n\n                                <div className=\"clearfix\">\n                                    <div className=\"float-right\">\n                                        <Input type=\"checkbox\" value={advancedOptions}\n                                               onChange={this.editAdvancedOptions}/><span className=\"mr-3\">Edit Advanced Options</span>\n                                        <Button className=\"btn-no-background\" onClick={this.gotoPrevStep}>Go\n                                            back</Button>\n\n                                        <Button className=\"ml-3 btn-blue\" onClick={this.gotoNextStep}>Next</Button>\n                                    </div>\n                                </div>\n                            </CardBody>\n\n\n                        </Card>\n                    </Collapse>\n                    {/* <div className=\"clearfix\" ref={(el) => {\n                            this.configEndDiv = el\n                        }}>\n                            <div className=\"float-right mb-3\">\n                                <Button color=\"info\" type=\"reset\" onClick={() => this.clearForm()}>Clear</Button>\n                                <Button color=\"success\" type=\"submit\">Create Config</Button>\n\n                            </div>\n                        </div> */}\n                    <NewDriveAuthModal isVisible={this.state.authModalIsVisible} closeModal={this.toggleAuthModal}/>\n                </ErrorBoundary>\n            </div>);\n    }\n}\n\nconst mapStateToProps = state => ({\n    /**\n     * The list of all providers.\n     */\n    providers: state.config.providers\n});\n\nNewDrive.propTypes = {\n    providers: PropTypes.array.isRequired,\n    getProviders: PropTypes.func.isRequired,\n    isEdit: PropTypes.bool.isRequired,\n    driveName: PropTypes.string\n};\n\nNewDrive.defaultProps = {\n    isEdit: false,\n};\n\nexport default connect(mapStateToProps, {getProviders})(NewDrive);\n"],"sourceRoot":""}