{"version":3,"sources":["_nav.js","routes.js","containers/DefaultLayout/DefaultLayout.js","actions/versionActions.js"],"names":["name","url","icon","MyDashboard","React","lazy","Home","ShowConfig","RemoteExplorerLayout","routes","path","exact","component","DefaultFooter","DefaultHeader","VERSION_NAV_ITEM_ATTRS","attributes","target","class","variant","DefaultLayout","loading","className","localStorage","getItem","AUTH_KEY","this","props","getVersion","history","push","data-test","ErrorBoundary","fixed","fallback","onLogout","e","signOut","display","navConfig","appRoutes","Container","fluid","map","route","idx","key","render","from","to","items","navigation","version","Component","connect","state","isConnected","status","dispatch","axiosInstance","post","urls","getRcloneVersion","then","res","type","GET_VERSION","REQUEST_SUCCESS","payload","data","error","REQUEST_ERROR"],"mappings":"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","file":"static/js/21.32a86203.chunk.js","sourcesContent":["export default {\n    items: [\n        {\n            name: 'Dashboard',\n            url: '/dashboard',\n            icon: 'icon-speedometer'\n        },\n        {\n            name: 'Configs',\n            url: '/showconfig',\n            icon: 'icon-note'\n        },\n        {\n            name: 'Explorer',\n            url: '/remoteExplorer',\n            icon: 'icon-screen-desktop'\n        },\n        {\n            name: 'Backend',\n            url: '/rcloneBackend',\n            icon: 'icon-star',\n        },\n        {\n            name: 'Log Out',\n            url: '/login',\n            icon: 'icon-logout',\n        },\n\n    ],\n};\n","import React from 'react';\n\nconst MyDashboard = React.lazy(() => import('./views/RemoteManagement/NewDrive'));\nconst Home = React.lazy(() => import('./views/Home'));\nconst ShowConfig = React.lazy(() => import('./views/RemoteManagement/ShowConfig'));\nconst RemoteExplorerLayout = React.lazy(() => import(\"./views/Explorer/RemoteExplorerLayout\"));\nconst Login = React.lazy(() => import(\"./views/Pages/Login\"));\nconst RCloneDashboard = React.lazy(() => import(\"./views/RCloneDashboard\"));\n\n// https://github.com/ReactTraining/react-router/tree/master/packages/react-router-config\n// Define the routes as required\nconst routes = [\n    {path: '/', exact: true, name: 'Home'},\n    {path: '/newdrive/edit/:drivePrefix', name: 'Edit Remote', component: MyDashboard},\n    {path: '/newdrive', exact: true, name: 'New Remote', component: MyDashboard},\n    {path: '/login', exact: true, name: 'Login Page', component: Login},\n    {path: '/dashboard', name: 'Dashboard', component: Home},\n    {path: '/showconfig', name: 'Configs', component: ShowConfig},\n    {path: '/remoteExplorer/:remoteName/:remotePath', exact: true, name: 'Explorer', component: RemoteExplorerLayout},\n    {path: '/remoteExplorer', name: 'Explorer', component: RemoteExplorerLayout},\n    {path: '/rcloneBackend', name: 'Rclone Backend', component: RCloneDashboard},\n\n];\n\nexport default routes;\n","import React, {Component, Suspense} from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\nimport {Container} from 'reactstrap';\nimport {getVersion} from \"../../actions/versionActions\";\n\nimport {\n    AppBreadcrumb,\n    AppFooter,\n    AppHeader,\n    AppSidebar,\n    AppSidebarFooter,\n    AppSidebarForm,\n    AppSidebarHeader,\n    AppSidebarMinimizer,\n    AppSidebarNav,\n} from '@coreui/react';\n// sidebar nav config\nimport navigation from '../../_nav';\n// routes config\nimport routes from '../../routes';\nimport {connect} from \"react-redux\";\nimport {AUTH_KEY} from \"../../utils/Constants\";\nimport ErrorBoundary from \"../../ErrorHandling/ErrorBoundary\";\n\n// const DefaultAside = React.lazy(() => import('./DefaultAside'));\nconst DefaultFooter = React.lazy(() => import('./DefaultFooter'));\nconst DefaultHeader = React.lazy(() => import('./DefaultHeader'));\n\nconst VERSION_NAV_ITEM_ATTRS = {\n    attributes: { target: '_blank' },\n    class: 'mt-auto',\n    icon: 'cui-cog',\n    url: 'https://rclone.org/changelog',\n    variant: 'success'\n}\nclass DefaultLayout extends Component {\n\n    loading = () => <div className=\"animated fadeIn pt-1 text-center\">Loading...</div>;\n\n    get navConfig() {\n        return {\n            items: [\n                ...navigation.items,\n                {\n                    name: this.props.version.version,\n                    ...VERSION_NAV_ITEM_ATTRS\n                }\n            ]\n        }\n    }\n\n    componentDidMount() {\n        if (!localStorage.getItem(AUTH_KEY)) {\n            this.props.history.push('/login');\n        } else {\n            this.props.getVersion();\n        }\n    }\n\n    render() {\n        // console.log(\"isConnected, default layout\", this.props.isConnected);\n        return (\n\n\n            <div className=\"app\" data-test=\"defaultLayout\">\n                <ErrorBoundary>\n                    <AppHeader fixed>\n                        <Suspense fallback={this.loading()}>\n                            <DefaultHeader onLogout={e => this.signOut(e)}/>\n                        </Suspense>\n                    </AppHeader>\n                    <div className=\"app-body\">\n                        <AppSidebar fixed display=\"lg\">\n                            <AppSidebarHeader/>\n                            <AppSidebarForm/>\n                            <Suspense fallback={this.loading()}>\n                                <AppSidebarNav navConfig={this.navConfig} />\n                            </Suspense>\n                            <AppSidebarFooter/>\n                            <AppSidebarMinimizer/>\n                        </AppSidebar>\n                        <main className=\"main\">\n                            <AppBreadcrumb appRoutes={routes}/>\n                            <Container fluid>\n                                <Suspense fallback={this.loading()}>\n                                    <Switch>\n                                        {\n                                            routes.map((route, idx) => {\n                                                return route.component ? (\n                                                    <Route\n                                                        key={idx}\n                                                        path={route.path}\n                                                        exact={route.exact}\n                                                        name={route.name}\n                                                        render={props => (\n                                                            <route.component {...props} />\n                                                        )}/>\n                                                ) : (null);\n                                            })\n                                        }\n                                        <Redirect from=\"/\" to=\"/login\"/>\n                                    </Switch>\n                                </Suspense>\n                            </Container>\n                        </main>\n                    </div>\n                    <AppFooter>\n                        <Suspense fallback={this.loading()}>\n                            <DefaultFooter/>\n                        </Suspense>\n                    </AppFooter>\n                </ErrorBoundary>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    isConnected: state.status.isConnected,\n    version: state.version,\n});\n\nexport default connect(mapStateToProps, { getVersion })(DefaultLayout);\n","import axiosInstance from '../utils/API/API';\nimport urls from '../utils/API/endpoint';\nimport { GET_VERSION, REQUEST_SUCCESS, REQUEST_ERROR } from './types';\n\nexport const getVersion = () => {\n  return dispatch => {\n    axiosInstance.post(urls.getRcloneVersion).then(\n      res =>\n        dispatch({\n          type: GET_VERSION,\n          status: REQUEST_SUCCESS,\n          payload: res.data\n        }),\n      error =>\n        dispatch({\n          type: GET_VERSION,\n          status: REQUEST_ERROR,\n          payload: error\n        })\n    );\n  };\n};\n"],"sourceRoot":""}