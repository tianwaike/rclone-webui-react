{"version":3,"sources":["views/Base/BackendStatusCard/BackendStatusCard.js","actions/statusActions.js","../node_modules/reactstrap/es/Progress.js","views/Base/RunningJobs/RunningJobs.js","../../../js/custom-tooltips.js","../../../js/index.js","../node_modules/reactstrap/es/Collapse.js"],"names":["TaskModal","ReactDOM","createPortal","mode","document","getElementById","MODAL_ROOT_ELEMENT","BackendStatusCard","toggleCheckStatus","props","checkStatus","enableCheckStatus","console","log","this","getStatus","refreshInterval","setInterval","STATUS_REFRESH_TIMEOUT","clearInterval","isConnected","ipAddress","localStorage","getItem","IP_ADDRESS_KEY","username","USER_NAME_KEY","className","StatusText","connectivityStatus","userName","Fragment","type","onClick","React","Component","statusText","defaultProps","connect","state","status","isDisabled","dispatch","getState","a","axiosInstance","post","urls","stats","then","res","FETCH_STATUS","REQUEST_SUCCESS","payload","data","error","REQUEST_ERROR","shouldEnable","ENABLE_STATUS_CHECK","getBandwidth","bwlimit","GET_BANDWIDTH","setBandwidth","newRate","rate","SET_BANDWIDTH","propTypes","children","PropTypes","node","bar","bool","multi","tag","tagPropType","value","oneOfType","string","number","max","animated","striped","color","barClassName","cssModule","object","Progress","Tag","attributes","_objectWithoutPropertiesLoose","percent","toNumber","progressClasses","mapToCssModules","classNames","progressBarClasses","ProgressBar","createElement","style","width","role","_extends","options","tooltips","enabled","custom","CustomTooltips","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","xAxes","display","JobCard","job","name","eta","percentage","speed","speedAvg","size","bytes","isNaN","Card","CardHeader","CardBody","formatBytes","secondsToStr","JobCardRow","Row","Col","lg","length","substr","getCroppedName","GlobalStatus","checks","elapsedTime","deletes","errors","transfers","lastError","TransferringJobs","transferring","undefined","map","item","idx","key","TransferringJobsRow","grouped","groupByKey","group","array","forEach","val","keys","push","JobGroup","groupId","useState","showCollapse","setShowCollapse","cancelButtonEnabled","setCancelButtonEnabled","Container","sm","Button","disabled","e","stopPropagation","indexOf","jobid","split","stopJob","_async","catch","err","Collapse","isOpen","RunningJobs","context","toggleShowing","setState","prevState","isShowing","jobs","lineChartData","overflowY","ownProps","speedData","labels","data1","data2","dataLength","slice","Math","ceil","bytesToKB","toFixed","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","ClassName","Selector","DIV","SPAN","TOOLTIP","_chart","canvas","id","_idMaker","_canvasId","_setCanvasId","tooltip","tooltipModel","titleLines","tooltipHeader","tooltipHeaderTitle","tooltipBody","tooltipBodyItems","tooltipBodyItem","colors","tooltipBodyItemColor","tooltipBodyItemLabel","tooltipBodyItemValue","position","positionY","positionLeft","positionTop","halfWidth","customTooltips","_transitionStatusToCl","_objectSpread2","Transition","arrayOf","navbar","innerRef","func","appear","enter","exit","timeout","TransitionTimeouts","transitionStatusToClassHash","TransitionStatuses","ENTERING","ENTERED","EXITING","EXITED","getHeight","scrollHeight","_Component","_this","call","height","bind","_assertThisInitialized","_inheritsLoose","_proto","prototype","onEntering","isAppearing","onEntered","onExit","onExiting","offsetHeight","onExited","render","_this2","_this$props","otherProps","transitionProps","pick","TransitionPropTypeKeys","childProps","omit","in","collapseClass","getTransitionClass","classes","ref"],"mappings":"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","file":"static/js/4.f894a8d7.chunk.js","sourcesContent":["import React from \"react\";\nimport {Button, Card, CardBody, CardHeader} from \"reactstrap\";\nimport * as PropTypes from \"prop-types\";\nimport ReactDOM from \"react-dom\";\nimport RunningJobs from \"../RunningJobs\";\nimport {connect} from \"react-redux\";\nimport {enableCheckStatus, getStatus} from \"../../../actions/statusActions\";\nimport {IP_ADDRESS_KEY, MODAL_ROOT_ELEMENT, STATUS_REFRESH_TIMEOUT, USER_NAME_KEY} from \"../../../utils/Constants\";\n\n/**\n * Functional component Modal which is placed in the element with id \"modal-root\" in index.html using React.createPortal\n * @returns {{children, implementation, containerInfo, $$typeof, key}}\n * @constructor\n */\nfunction TaskModal() {\n    return ReactDOM.createPortal((\n        <RunningJobs mode={\"modal\"}/>\n\n    ), document.getElementById(MODAL_ROOT_ELEMENT));\n}\n\n/**\n * Component for display and monitoring of backend rclone status. Auto refresh status in redux store every 5 seconds.\n */\nclass BackendStatusCard extends React.Component {\n\n\n    componentDidMount() {\n\n        // Check if the connection to the backend is active\n        this.props.getStatus();\n        this.refreshInterval = setInterval(() => this.props.getStatus(), STATUS_REFRESH_TIMEOUT);\n    }\n\n\n    componentWillUnmount() {\n        // Clear the interval before component is unmounted\n        clearInterval(this.refreshInterval);\n    }\n\n    /**\n     * Enable or disable checking of status request by http request to the backend.\n     */\n    toggleCheckStatus = () => {\n        const {checkStatus, enableCheckStatus} = this.props;\n        console.log(checkStatus, enableCheckStatus);\n        enableCheckStatus(!checkStatus);\n    };\n\n    /**\n     * Renders the component with mode.\n     * Card: Enables the card mode.\n     * Default: Table mode (Grid)\n     * @returns {*}\n     */\n    render() {\n        const {isConnected, mode, checkStatus} = this.props;\n\n        const ipAddress = localStorage.getItem(IP_ADDRESS_KEY);\n        const username = localStorage.getItem(USER_NAME_KEY);\n\n\n        if (mode === \"card\")\n            return (\n\n                <Card\n                    className={\"text-center \" + (isConnected ? \"card-accent-info\" : \"card-accent-warning\")}>\n                    <CardHeader>\n                        Overview\n                    </CardHeader>\n                    <CardBody>\n                        <StatusText checkStatus={checkStatus} connectivityStatus={isConnected} ipAddress={ipAddress}\n                                    userName={username}/>\n\n                    </CardBody>\n                </Card>\n            );\n        else /*Default*/\n            return (\n                <React.Fragment>\n                    <Button type=\"primary\" onClick={this.toggleCheckStatus}\n                            className={isConnected ? \"bg-info  d-none d-lg-block\" : \"bg-warning d-none d-lg-block\"}> {checkStatus ? isConnected ? \"CONNECTED\" : \"DISCONNECTED\" : \"DISABLED\"}</Button>\n                    {/*Show current tasks in the side modal*/}\n                    <TaskModal/>\n                </React.Fragment>\n            );\n    }\n}\n\n/**\n *\n * @param connectivityStatus    {boolean}   Current connectivity status to the backend.\n * @param checkStatus           {boolean}   Specify whether to check the status or skip.\n * @param ipAddress             {string}    IP Address of the backend\n * @param userName              {string}    User name of the currently logged in user.\n * @returns {*}\n * @constructor\n */\nfunction StatusText({connectivityStatus, checkStatus, ipAddress, userName}) {\n\n    let statusText = \"\";\n    if(!checkStatus){\n        statusText = \"Not monitoring connectivity status. Tap the icon in navbar to start.\";\n    }else if(connectivityStatus){\n        // Connected to backend\n        statusText = \"rClone Backend is connected and working as expected\";\n    }else{\n        statusText = \"Cannot connect to rclone backend. There is a problem with connecting to {ipAddress}.\"\n    }\n\n    return (\n        <>\n            <p>\n                <span className={\"card-subtitle\"}>Status: {\" \"}</span>\n                <span className=\"card-text\">{statusText}</span>\n            </p>\n            <p>\n                <span className={\"card-subtitle\"}>Current IP Address: {\" \"}</span>\n                <span className=\"card-text\">{ipAddress}</span>\n            </p>\n            <p>\n                <span className={\"card-subtitle\"}>Username: {\" \"}</span>\n                <span className=\"card-text\">{userName}</span>\n            </p>\n        </>\n    )\n}\n\nconst propTypes = {\n    /**\n     * Used to specify mode of render : card/ grid.\n     */\n    mode: PropTypes.string.isRequired,\n    /**\n     * Boolean to represent internet connectivity\n     */\n    isConnected: PropTypes.bool.isRequired,\n    /**\n     * Boolean to represent whether checking for status at interval is allowed\n     */\n    checkStatus: PropTypes.bool.isRequired,\n\n\n    /**\n     * Function to enable or disable status check\n     */\n    enableCheckStatus: PropTypes.func.isRequired,\n    /**\n     * Get the current status\n     */\n    getStatus: PropTypes.func.isRequired\n};\n\nconst defaultProps = {\n    mode: \"card\",\n};\n\n\nBackendStatusCard.propTypes = propTypes;\nBackendStatusCard.defaultProps = defaultProps;\n\nconst mapStateToProps = state => ({\n    isConnected: state.status.isConnected,\n    isDisabled: state.status.isDisabled,\n    checkStatus: state.status.checkStatus\n});\n\nexport default connect(mapStateToProps, {getStatus, enableCheckStatus})(BackendStatusCard);\n","import axiosInstance from \"../utils/API/API\";\nimport {ENABLE_STATUS_CHECK, FETCH_STATUS, GET_BANDWIDTH, REQUEST_ERROR, REQUEST_SUCCESS, SET_BANDWIDTH} from \"./types\";\nimport urls from \"../utils/API/endpoint\";\n\n/**\n * Gets the current status of the rclone backend.\n * Depends upon state.status.checkStatus to execute the http request, if set to false, does not send any http request\n * @returns {Function}\n */\nexport const getStatus = () => async (dispatch, getState) => {\n    // console.log(\"get Status\");\n    const {status} = getState();\n    if (status.checkStatus) {\n        axiosInstance.post(urls.stats).then(res => dispatch({\n            type: FETCH_STATUS,\n            status: REQUEST_SUCCESS,\n            payload: res.data\n        }), error => dispatch({\n            type: FETCH_STATUS,\n            status: REQUEST_ERROR,\n            payload: error\n        }))\n    }\n};\n\n/**\n * Enables or disables the check status functionality to improve network performance.\n * Modifies state.status.checkStatus according to the passed value.\n * @param shouldEnable {boolean} It specifies whether to check for status updates from the backend or skip checking it\n * @returns {Function}\n */\nexport const enableCheckStatus = (shouldEnable) => async dispatch => {\n    dispatch({\n        type: ENABLE_STATUS_CHECK,\n        payload: shouldEnable\n    })\n};\n\n\n/**\n * Gets the current bandwidth set in the rclone backend.\n * @returns {Function}\n */\nexport const getBandwidth = () => async dispatch => {\n    // console.log(\"get Status\");\n    axiosInstance.post(urls.bwlimit).then(res => dispatch({\n        type: GET_BANDWIDTH,\n        status: REQUEST_SUCCESS,\n        payload: res.data\n    }), error => dispatch({\n        type: GET_BANDWIDTH,\n        status: REQUEST_ERROR,\n        payload: error\n    }))\n};\n\n/**\n * Changes the current bandwidth limit of the rclone backend.\n * @param newRate {string} Human readable format of size eg: 1M|2M|1.2G specifying 1MB, 2MB, 1.2GB respectively.\n * @returns {Function}\n */\nexport const setBandwidth = (newRate) => async dispatch => {\n    // console.log(\"get Status\");\n    axiosInstance.post(urls.bwlimit, {rate: newRate}).then(res => dispatch({\n        type: SET_BANDWIDTH,\n        status: REQUEST_SUCCESS,\n        payload: res.data\n    }), error => dispatch({\n        type: SET_BANDWIDTH,\n        status: REQUEST_ERROR,\n        payload: error\n    }))\n};\n\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType, toNumber } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  bar: PropTypes.bool,\n  multi: PropTypes.bool,\n  tag: tagPropType,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  max: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  animated: PropTypes.bool,\n  striped: PropTypes.bool,\n  color: PropTypes.string,\n  className: PropTypes.string,\n  barClassName: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div',\n  value: 0,\n  max: 100\n};\n\nvar Progress = function Progress(props) {\n  var children = props.children,\n      className = props.className,\n      barClassName = props.barClassName,\n      cssModule = props.cssModule,\n      value = props.value,\n      max = props.max,\n      animated = props.animated,\n      striped = props.striped,\n      color = props.color,\n      bar = props.bar,\n      multi = props.multi,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"children\", \"className\", \"barClassName\", \"cssModule\", \"value\", \"max\", \"animated\", \"striped\", \"color\", \"bar\", \"multi\", \"tag\"]);\n\n  var percent = toNumber(value) / toNumber(max) * 100;\n  var progressClasses = mapToCssModules(classNames(className, 'progress'), cssModule);\n  var progressBarClasses = mapToCssModules(classNames('progress-bar', bar ? className || barClassName : barClassName, animated ? 'progress-bar-animated' : null, color ? \"bg-\" + color : null, striped || animated ? 'progress-bar-striped' : null), cssModule);\n  var ProgressBar = multi ? children : React.createElement(\"div\", {\n    className: progressBarClasses,\n    style: {\n      width: percent + \"%\"\n    },\n    role: \"progressbar\",\n    \"aria-valuenow\": value,\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": max,\n    children: children\n  });\n\n  if (bar) {\n    return ProgressBar;\n  }\n\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: progressClasses,\n    children: ProgressBar\n  }));\n};\n\nProgress.propTypes = propTypes;\nProgress.defaultProps = defaultProps;\nexport default Progress;","import React, {useState} from 'react';\nimport {Button, Card, CardBody, CardHeader, Col, Collapse, Container, Progress, Row} from \"reactstrap\";\nimport {bytesToKB, formatBytes, groupByKey, secondsToStr} from \"../../../utils/Tools\";\nimport * as PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {Line} from \"react-chartjs-2\";\nimport {CustomTooltips} from \"@coreui/coreui-plugin-chartjs-custom-tooltips\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport urls from \"../../../utils/API/endpoint\";\n\nconst options = {\n    tooltips: {\n        enabled: false,\n        custom: CustomTooltips\n    },\n    maintainAspectRatio: false,\n    scales: {\n        yAxes: [{\n            ticks: {\n                beginAtZero: true\n            }\n        }],\n        xAxes: [{\n            ticks: {\n                display: false\n            }\n        }]\n    }\n};\nfunction JobCard({job}) {\n    const {name, eta, percentage, speed, speedAvg, size, bytes} = job;\n    if (name && !isNaN(speed)) {\n\n        return (<Card>\n            <CardHeader>Running Jobs</CardHeader>\n            <CardBody>\n                <p>{name}</p> {/*Name of the file*/}\n                <Progress value={percentage} className={\"mb-2\"}>{percentage} %</Progress> {/*percentage*/}\n                <p><strong>Speed: </strong>{formatBytes(speed)}PS</p> {/*speed*/}\n                <p><strong>Average Speed: </strong>{formatBytes(speedAvg)}PS</p> {/*speedAvg*/}\n                <p><strong>Total transferred: </strong>{formatBytes(bytes)}</p> {/*bytes: convert to mb*/}\n                <p><strong>Size: </strong>{formatBytes(size)}</p>\n                <p><strong>ETA: </strong>{secondsToStr(eta)}</p>\n            </CardBody>\n\n        </Card>);\n    }\n    return null;\n}\n\nfunction getCroppedName(name) {\n    const leftChars = 30;\n    const rightChars = 5;\n\n    if (name.length > leftChars) {\n        const croppedName = name.substr(0, leftChars) + \" ... \" + name.substr(-rightChars);\n        return croppedName;\n    }\n    return name;\n\n}\n\nfunction JobCardRow({job}) {\n    const {name, percentage, speed, size} = job;\n    return (\n        <React.Fragment>\n            <Row className=\"runningJobs\">\n                {(size && speed) ? (\n\n                    <Col lg={12} className=\"itemName\"> {getCroppedName(name)} {\" \"}\n                        ({formatBytes(size)}) - {formatBytes(speed)}PS </Col>\n                ) : (\n                    <Col lg={12}>Calculating</Col>)}\n\n            </Row>\n            <Row>\n                <Col lg={12}><Progress value={percentage} className={\"mb-2\"}>{percentage} %</Progress></Col>\n            </Row>\n\n        </React.Fragment>\n    );\n\n\n}\n\nfunction GlobalStatus({stats}) {\n    const {speed, bytes, checks, elapsedTime, deletes, errors, transfers, lastError} = stats;\n    return (\n        <Card>\n            <CardHeader><strong>Global Stats</strong></CardHeader>\n            <CardBody>\n                <table className=\"table\">\n                    <tbody>\n                    <tr>\n                        <td className=\"card-subtitle\">Bytes Transferred:</td>\n                        <td className=\"card-text\">{formatBytes(bytes)}</td>\n                    </tr>\n                    <tr>\n                        <td className=\"card-subtitle\">Average Speed:</td>\n                        <td className=\"card-text\">{formatBytes(speed)}PS</td>\n                    </tr>\n                    <tr>\n                        <td className=\"card-subtitle\">Checks:</td>\n                        <td className=\"card-text\">{checks}</td>\n                    </tr>\n                    <tr>\n                        <td className=\"card-subtitle\">Deletes:</td>\n                        <td className=\"card-text\">{deletes}</td>\n                    </tr>\n                    <tr>\n                        <td className=\"card-subtitle\">Running since:</td>\n                        <td className=\"card-text\">{secondsToStr(elapsedTime)}</td>\n                    </tr>\n                    <tr className={errors > 0 ? \"table-danger\" : \"\"}>\n                        <td className=\"card-subtitle\">Errors:</td>\n                        <td className=\"card-text\">{errors}</td>\n                    </tr>\n                    <tr>\n                        <td className=\"card-subtitle\">Transfers:</td>\n                        <td className=\"card-text\">{transfers}</td>\n                    </tr>\n                    <tr>\n                        <td className=\"card-subtitle\">Last Error:</td>\n                        <td className=\"card-text\">{lastError}</td>\n                    </tr>\n\n                    </tbody>\n                </table>\n\n            </CardBody>\n            {/*<CardFooter></CardFooter>*/}\n\n        </Card>);\n}\n\nfunction TransferringJobs({transferring}) {\n    if (transferring !== undefined) {\n        return transferring.map((item, idx) => {\n            return (<JobCard key={item.name} job={item}/>);\n        });\n    }\n    return null;\n}\n\nfunction TransferringJobsRow({transferring}) {\n    if (transferring !== undefined) {\n        const grouped = groupByKey(transferring, job => job.group);\n        console.log(grouped);\n\n        const array = [];\n\n        grouped.forEach((val, keys) => {\n            console.log(val, keys);\n            array.push (<JobGroup job={val} groupId={keys} key={keys}/>);\n        });\n        return array;\n\n        // return grouped.values().map((item, idx) => {\n        // \treturn (<JobCardRow key={item.name} job={item}/>);\n        // });\n    }\n    return null;\n}\n\nfunction JobGroup({job, groupId}) {\n    const [showCollapse, setShowCollapse] = useState(false);\n    const [cancelButtonEnabled, setCancelButtonEnabled] = useState(true);\n    console.log(job);\n\n    const stopJob = (e, groupId) => {\n        e.stopPropagation();\n        if(groupId && groupId.indexOf('/') !== -1) {\n            setCancelButtonEnabled(false);\n            const jobid = groupId.split('/')[1];\n            axiosInstance.post(urls.stopJob, {jobid, _async:true}).then(function (res) {\n                console.log(res);\n            }).catch(err => {\n                console.error(err);\n            })\n        }\n    };\n    // setCancelButtonEnabled((groupId && groupId !== \"undefined\"));\n    if(job) {\n        return (\n            <>\n                {groupId &&\n                <Card>\n\n                    <CardHeader onClick={() => setShowCollapse(!showCollapse)}>\n                        <Container>\n                            <Row>\n                                <Col sm={10}>\n                                    Transferring {job.length} file(s)\n                                </Col>\n                                <Col sm={2}>\n                                    <Button color={\"light\"} disabled={!cancelButtonEnabled}\n                                            onClick={(e) => stopJob(e, groupId)}\n                                            className={\"btn-outline-danger btn-pill\"}><i\n                                        className=\"fa fa-close fa-sm\"/></Button>\n                                </Col>\n                            </Row>\n                        </Container>\n                    </CardHeader>\n                    <Collapse isOpen={showCollapse}>\n                        <CardBody>\n                            {\n                                job.map((item, idx) => {\n                                    return (<JobCardRow key={item.name} job={item}/>);\n                                })\n                            }\n                        </CardBody>\n                    </Collapse>\n                </Card>\n                }\n            </>\n        );\n    }\n    return null;\n}\n\n\nclass RunningJobs extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            isShowing: true\n        }\n    }\n\n    toggleShowing = () => {\n        this.setState((prevState) => {\n            return {\n                isShowing: !prevState.isShowing\n            }\n        })\n    };\n\n\n\n\n\n    render() {\n        const {jobs, isConnected, lineChartData} = this.props;\n        const {transferring} = jobs;\n        const {mode} = this.props;\n        if (mode === \"full-status\") {\n            if (isConnected) {\n                return (\n                    <Row>\n                        <Col sm={12} lg={6}>\n                            <GlobalStatus stats={jobs}/>\n                        </Col>\n\n                        <Col sm={12} lg={6}>\n                            <Card>\n                                <CardHeader>\n                                    Speed\n                                </CardHeader>\n                                <CardBody>\n                                    <div className=\"chart-wrapper\">\n                                        <Line data={lineChartData} options={options}/>\n                                    </div>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                        <Col sm={12} lg={4}>\n                            <TransferringJobs transferring={transferring}/>\n                        </Col>\n                    </Row>\n                );\n            } else {\n                return (<div>Not connected to rclone.</div>)\n            }\n\n        } else if (mode === \"card\") {\n            if (isConnected) {\n                return (\n                    <TransferringJobsRow transferring={transferring}/>\n                );\n            } else {\n                return (<div>Not connected to rclone.</div>);\n            }\n\n        } else if (mode === \"modal\") {\n            if (transferring && transferring.length > 0)\n                return (\n                    <Card className=\"progress-modal d-none d-sm-block\">\n                        <CardHeader onClick={() => this.toggleShowing()}>Progress\n                            <div className=\"card-header-actions\">\n                                <Button color=\"link\">\n                                    <i className=\"fa fa-close fa-lg\"/>\n                                </Button>\n                            </div>\n                        </CardHeader>\n                        <CardBody className={!this.state.isShowing ? \"d-none\" : \"progress-modal-body\"}  style={{overflowY: 'scroll'}}>\n                            <TransferringJobsRow transferring={transferring}/>\n\n                        </CardBody>\n                    </Card>\n                );\n            return null;\n        }\n    }\n}\n\nRunningJobs.propTypes = {\n    mode: PropTypes.string.isRequired,\n    isConnected: PropTypes.bool.isRequired,\n    jobs: PropTypes.object.isRequired,\n    error: PropTypes.object\n};\n\nconst mapStateToProps = (state, ownProps) => {\n\n    const speedData = state.status.speed;\n    let lineChartData = {};\n    if (speedData) {\n        let labels = [];\n        let data1 = [];\n        let data2 = [];\n\n        const dataLength = speedData.length;\n        //\n        const limitedData = speedData.slice(dataLength - 50, dataLength - 1);\n        // console.log(limitedData.length);\n        limitedData.forEach((item, idx) => {\n            labels.push(Math.ceil(item.elapsedTime));\n            data1.push(bytesToKB(item.speed).toFixed(2));\n            data2.push(bytesToKB(item.speedAvg).toFixed(2));\n        });\n\n        // console.log(data1, data2);\n        lineChartData = {\n            labels: labels,\n            datasets: [\n                {\n                    label: 'Speed (kbps)',\n                    fill: false,\n                    lineTension: 0.1,\n                    backgroundColor: 'rgba(75,192,192,0.4)',\n                    borderColor: 'rgba(75,192,192,1)',\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: 'rgba(75,192,192,1)',\n                    pointBackgroundColor: '#fff',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    data: data1,\n                },\n                {\n                    label: 'Average Speed (kbps)',\n                    fill: true,\n                    lineTension: 0.1,\n                    backgroundColor: 'rgba(187,69,14,0.4)',\n                    borderColor: 'rgb(192,76,58)',\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: 'rgb(187,69,14)',\n                    pointBackgroundColor: '#ff7459',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    data: data2,\n                }\n            ],\n        };\n    }\n\n\n    return {\n        jobs: state.status.jobs,\n        isConnected: state.status.isConnected,\n        error: state.status.error,\n        lineChartData\n    }\n};\n\nexport default connect(mapStateToProps, {})(RunningJobs);\n","/**\n * --------------------------------------------------------------------------\n * CoreUI Plugins - Custom Tooltips for Chart.js (v1.3.1): custom-tooltips.js\n * Licensed under MIT (https://coreui.io/license)\n * --------------------------------------------------------------------------\n */\n\nfunction CustomTooltips(tooltipModel) {\n  // Add unique id if not exist\n  const _setCanvasId = () => {\n    const _idMaker = () => {\n      const _hex = 16\n      const _multiplier = 0x10000\n      return ((1 + Math.random()) * _multiplier | 0).toString(_hex)\n    }\n    const _canvasId = `_canvas-${_idMaker() + _idMaker()}`\n    this._chart.canvas.id = _canvasId\n    return _canvasId\n  }\n\n  const ClassName = {\n    ABOVE                   : 'above',\n    BELOW                   : 'below',\n    CHARTJS_TOOLTIP         : 'chartjs-tooltip',\n    NO_TRANSFORM            : 'no-transform',\n    TOOLTIP_BODY            : 'tooltip-body',\n    TOOLTIP_BODY_ITEM       : 'tooltip-body-item',\n    TOOLTIP_BODY_ITEM_COLOR : 'tooltip-body-item-color',\n    TOOLTIP_BODY_ITEM_LABEL : 'tooltip-body-item-label',\n    TOOLTIP_BODY_ITEM_VALUE : 'tooltip-body-item-value',\n    TOOLTIP_HEADER          : 'tooltip-header',\n    TOOLTIP_HEADER_ITEM     : 'tooltip-header-item'\n  }\n\n  const Selector = {\n    DIV     : 'div',\n    SPAN    : 'span',\n    TOOLTIP : `${this._chart.canvas.id || _setCanvasId()}-tooltip`\n  }\n\n  let tooltip = document.getElementById(Selector.TOOLTIP)\n\n  if (!tooltip) {\n    tooltip = document.createElement('div')\n    tooltip.id = Selector.TOOLTIP\n    tooltip.className = ClassName.CHARTJS_TOOLTIP\n    this._chart.canvas.parentNode.appendChild(tooltip)\n  }\n\n  // Hide if no tooltip\n  if (tooltipModel.opacity === 0) {\n    tooltip.style.opacity = 0\n    return\n  }\n\n  // Set caret Position\n  tooltip.classList.remove(ClassName.ABOVE, ClassName.BELOW, ClassName.NO_TRANSFORM)\n  if (tooltipModel.yAlign) {\n    tooltip.classList.add(tooltipModel.yAlign)\n  } else {\n    tooltip.classList.add(ClassName.NO_TRANSFORM)\n  }\n\n  // Set Text\n  if (tooltipModel.body) {\n    const titleLines = tooltipModel.title || []\n\n    const tooltipHeader = document.createElement(Selector.DIV)\n    tooltipHeader.className = ClassName.TOOLTIP_HEADER\n\n    titleLines.forEach((title) => {\n      const tooltipHeaderTitle = document.createElement(Selector.DIV)\n      tooltipHeaderTitle.className = ClassName.TOOLTIP_HEADER_ITEM\n      tooltipHeaderTitle.innerHTML = title\n      tooltipHeader.appendChild(tooltipHeaderTitle)\n    })\n\n    const tooltipBody = document.createElement(Selector.DIV)\n    tooltipBody.className = ClassName.TOOLTIP_BODY\n\n    const tooltipBodyItems = tooltipModel.body.map((item) => item.lines)\n    tooltipBodyItems.forEach((item, i) => {\n      const tooltipBodyItem = document.createElement(Selector.DIV)\n      tooltipBodyItem.className = ClassName.TOOLTIP_BODY_ITEM\n\n      const colors = tooltipModel.labelColors[i]\n\n      const tooltipBodyItemColor = document.createElement(Selector.SPAN)\n      tooltipBodyItemColor.className = ClassName.TOOLTIP_BODY_ITEM_COLOR\n      tooltipBodyItemColor.style.backgroundColor = colors.backgroundColor\n\n      tooltipBodyItem.appendChild(tooltipBodyItemColor)\n\n      if (item[0].split(':').length > 1) {\n        const tooltipBodyItemLabel = document.createElement(Selector.SPAN)\n        tooltipBodyItemLabel.className = ClassName.TOOLTIP_BODY_ITEM_LABEL\n        tooltipBodyItemLabel.innerHTML = item[0].split(': ')[0]\n\n        tooltipBodyItem.appendChild(tooltipBodyItemLabel)\n\n        const tooltipBodyItemValue = document.createElement(Selector.SPAN)\n        tooltipBodyItemValue.className = ClassName.TOOLTIP_BODY_ITEM_VALUE\n        tooltipBodyItemValue.innerHTML = item[0].split(': ').pop()\n\n        tooltipBodyItem.appendChild(tooltipBodyItemValue)\n      } else {\n        const tooltipBodyItemValue = document.createElement(Selector.SPAN)\n        tooltipBodyItemValue.className = ClassName.TOOLTIP_BODY_ITEM_VALUE\n        tooltipBodyItemValue.innerHTML = item[0]\n\n        tooltipBodyItem.appendChild(tooltipBodyItemValue)\n      }\n\n      tooltipBody.appendChild(tooltipBodyItem)\n    })\n\n    tooltip.innerHTML = ''\n\n    tooltip.appendChild(tooltipHeader)\n    tooltip.appendChild(tooltipBody)\n  }\n\n  const position = this._chart.canvas.getBoundingClientRect()\n\n  const positionY = this._chart.canvas.offsetTop\n  const positionX = this._chart.canvas.offsetLeft\n\n  let positionLeft = positionX + tooltipModel.caretX\n  const positionTop = positionY + tooltipModel.caretY\n  // eslint-disable-next-line\n  const halfWidth = tooltipModel.width / 2\n\n  if (positionLeft + halfWidth > position.width) {\n    positionLeft -= halfWidth\n  } else if (positionLeft < halfWidth) {\n    positionLeft += halfWidth\n  }\n\n  // Display, position, and set styles for font\n  tooltip.style.opacity = 1\n  tooltip.style.left = `${positionLeft}px`\n  tooltip.style.top = `${positionTop}px`\n}\n\nexport default CustomTooltips\n","import CustomTooltips from './custom-tooltips'\nconst customTooltips = CustomTooltips\n// TODO: camel-case\nexport {\n  CustomTooltips,\n  customTooltips\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _objectSpread2 from \"@babel/runtime/helpers/esm/objectSpread\";\n\nvar _transitionStatusToCl;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Transition } from 'react-transition-group';\nimport { mapToCssModules, omit, pick, TransitionTimeouts, TransitionPropTypeKeys, TransitionStatuses, tagPropType } from './utils';\n\nvar propTypes = _objectSpread2({}, Transition.propTypes, {\n  isOpen: PropTypes.bool,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  tag: tagPropType,\n  className: PropTypes.node,\n  navbar: PropTypes.bool,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\n});\n\nvar defaultProps = _objectSpread2({}, Transition.defaultProps, {\n  isOpen: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  tag: 'div',\n  timeout: TransitionTimeouts.Collapse\n});\n\nvar transitionStatusToClassHash = (_transitionStatusToCl = {}, _transitionStatusToCl[TransitionStatuses.ENTERING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.ENTERED] = 'collapse show', _transitionStatusToCl[TransitionStatuses.EXITING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.EXITED] = 'collapse', _transitionStatusToCl);\n\nfunction getTransitionClass(status) {\n  return transitionStatusToClassHash[status] || 'collapse';\n}\n\nfunction getHeight(node) {\n  return node.scrollHeight;\n}\n\nvar Collapse =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Collapse, _Component);\n\n  function Collapse(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.state = {\n      height: null\n    };\n    ['onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited'].forEach(function (name) {\n      _this[name] = _this[name].bind(_assertThisInitialized(_this));\n    });\n    return _this;\n  }\n\n  var _proto = Collapse.prototype;\n\n  _proto.onEntering = function onEntering(node, isAppearing) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onEntering(node, isAppearing);\n  };\n\n  _proto.onEntered = function onEntered(node, isAppearing) {\n    this.setState({\n      height: null\n    });\n    this.props.onEntered(node, isAppearing);\n  };\n\n  _proto.onExit = function onExit(node) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onExit(node);\n  };\n\n  _proto.onExiting = function onExiting(node) {\n    // getting this variable triggers a reflow\n    var _unused = node.offsetHeight; // eslint-disable-line no-unused-vars\n\n    this.setState({\n      height: 0\n    });\n    this.props.onExiting(node);\n  };\n\n  _proto.onExited = function onExited(node) {\n    this.setState({\n      height: null\n    });\n    this.props.onExited(node);\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        Tag = _this$props.tag,\n        isOpen = _this$props.isOpen,\n        className = _this$props.className,\n        navbar = _this$props.navbar,\n        cssModule = _this$props.cssModule,\n        children = _this$props.children,\n        innerRef = _this$props.innerRef,\n        otherProps = _objectWithoutPropertiesLoose(_this$props, [\"tag\", \"isOpen\", \"className\", \"navbar\", \"cssModule\", \"children\", \"innerRef\"]);\n\n    var height = this.state.height;\n    var transitionProps = pick(otherProps, TransitionPropTypeKeys);\n    var childProps = omit(otherProps, TransitionPropTypeKeys);\n    return React.createElement(Transition, _extends({}, transitionProps, {\n      in: isOpen,\n      onEntering: this.onEntering,\n      onEntered: this.onEntered,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }), function (status) {\n      var collapseClass = getTransitionClass(status);\n      var classes = mapToCssModules(classNames(className, collapseClass, navbar && 'navbar-collapse'), cssModule);\n      var style = height === null ? null : {\n        height: height\n      };\n      return React.createElement(Tag, _extends({}, childProps, {\n        style: _objectSpread2({}, childProps.style, {}, style),\n        className: classes,\n        ref: _this2.props.innerRef\n      }), children);\n    });\n  };\n\n  return Collapse;\n}(Component);\n\nCollapse.propTypes = propTypes;\nCollapse.defaultProps = defaultProps;\nexport default Collapse;"],"sourceRoot":""}